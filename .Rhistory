pl_14_10_rc <- pl_14_10_crop %>%
mutate(lc = case_when(
port_51740_landcover_2014.tif < 6  ~ 0,
port_51740_landcover_2014.tif >= 6 ~ 1
))
# Reclassify the cropped raster image
pl_14_10_rc <- pl_14_10_crop %>%
mutate(lc = case_when(
port_51740_landcover_2014.tif < 6  ~ 0,
port_51740_landcover_2014.tif >= 6 ~ 1
))
# Plot the reclassified raster image
mv(pl_14_10_rc["lc"])
# Create a table of values for the reclassified raster image
table(pl_14_10_rc["lc"])
# Calculate the mean value for a 3x3 cell neighborhood
pcnt_imperv = focal2(pl_14_10_rc["lc"], matrix(1, 3, 3), "mean")
# histogram of the percentage of 1 (impervious) per 30x30m cell
hist(pcnt_imperv$lc)
# Plot the result of the mean calculation
plot(pcnt_imperv)
mv(pcnt_imperv)
View(pl_14_10)
View(pl_14_10_rc)
View(pl_14_10_rc)
# Read in the raster image
pl_14 <- read_stars("Data/DEM/USGS_1_n38w077_20170509.tif")
isle_bound<- st_read("Data/isle/Precincts2022")%>%
st_transform('EPSG:2284')
isle_bound<- st_read("Data/isle/Precincts2022")%>%
st_transform(crs = st_crs(pl_14))
# Read in the raster image
dem <- read_stars("Data/DEM/USGS_1_n38w077_20170509.tif")
isle_bound<- st_read("Data/isle/Precincts2022")%>%
st_transform(crs = st_crs(pl_14))
# Crop the resampled raster image to the test area
dem_isle <- st_crop(pl_14_10, isle_bound)
# Crop the resampled raster image to the test area
dem_isle <- st_crop(dem, isle_bound)
# Plot the cropped raster image
mv(dem_isle) + mv(isle_bound)
DEM1 <- raster("Data/DEM/USGS_1_n38w077_20170509.tif")
DEM2 <- raster("Data/DEM/USGS_1_n37w077_20160315.tif")
DEM <- raster::merge(DEM1, DEM2)
isle_bound<- st_read("Data/isle/Precincts2022")%>%
st_transform(crs = st_crs(pl_14))
# Crop the resampled raster image to the test area
dem_isle <- st_crop(dem, isle_bound)
# Crop the resampled raster image to the test area
dem_isle <- st_crop(DEM, isle_bound)
# Read in the raster image
pl_14 <- read_stars("Data/lc/port_51740_lc_2014/port_51740_landcover_2014.tif")
# Transform the test area object to the same CRS as the raster image
test_area <- geojson_sf(test_area_geojson, crs = "EPSG::4326") %>%
st_transform(crs = st_crs(pl_14))
# Resample the raster image to 10x10 cells
pl_14_10 <- st_warp(pl_14, cellsize = 10, crs = st_crs(pl_14))
# Plot the resampled raster image
mv(pl_14_10) + mv(test_area)
# Crop the resampled raster image to the test area
pl_14_10_crop <- st_crop(pl_14_10, test_area)
# Plot the cropped raster image
mv(pl_14_10_crop) + mv(test_area)
# Reclassify the cropped raster image
pl_14_10_rc <- pl_14_10_crop %>%
mutate(lc = case_when(
port_51740_landcover_2014.tif < 6  ~ 0,
port_51740_landcover_2014.tif >= 6 ~ 1
))
# Plot the reclassified raster image
#error
mv(pl_14_10_rc["lc"])
# Create a table of values for the reclassified raster image
table(pl_14_10_rc["lc"])
# Calculate the mean value for a 3x3 cell neighborhood
pcnt_imperv = focal2(pl_14_10_rc["lc"], matrix(1, 3, 3), "mean")
# histogram of the percentage of 1 (impervious) per 30x30m cell
hist(pcnt_imperv$lc)
# Plot the result of the mean calculation
# Why does these two methods look different?
plot(pcnt_imperv)
mv(pcnt_imperv)
View(pl_14)
pl_14_10_rc
# Plot the reclassified raster image
#error
mv(pl_14_10_rc["lc"])
# Create a table of values for the reclassified raster image
table(pl_14_10_rc["lc"])
# Plot the reclassified raster image
#error
xx <- pl_14_10_rd["lc"]
# Plot the reclassified raster image
#error
xx <- pl_14_10_rc["lc"]
mv(xx)
mv(pl_14_10_rc$lc)
mv(pl_14_10_rc$lc)
mv(pl_14_10_rc)
mv(xx)
# Create a table of values for the reclassified raster image
table(pl_14_10_rc["lc"])
# Calculate the mean value for a 3x3 cell neighborhood
pcnt_imperv = focal2(pl_14_10_rc["lc"], matrix(1, 3, 3), "mean")
# histogram of the percentage of 1 (impervious) per 30x30m cell
hist(pcnt_imperv$lc)
# Plot the result of the mean calculation
# Why do these two methods look different?
plot(pcnt_imperv)
mv(pcnt_imperv)
install.packages("starsdata", repos = "http://gis-bigdata.uni-muenster.de/pebesma", type = "source"
ï¼‰
install.packages("starsdata", repos = "http://gis-bigdata.uni-muenster.de/pebesma", type = "source")
library(tidyverse)
library(sf)
library(raster)
library(knitr)
library(kableExtra)
library(tidycensus)
library(tigris)
library(FNN)
#library(QuantPsyc) # JE Note: in R 4.1, QuantPsyc package not available.
library(caret)
library(yardstick)
library(pscl)
library(plotROC)
library(ggrepel)
library(pROC)
library(grid)
library(gridExtra)
library(viridis)
library(igraph)
library(exactextractr)
library(geojsonsf)
library(stars)
library(starsExtra)
library(mapview)
library(glue)
plotTheme <- theme(
plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size = 10),
# Set the entire chart region to blank
panel.background=element_blank(),
plot.background=element_blank(),
#panel.border=element_rect(colour="#F0F0F0"),
# Format the grid
panel.grid.major=element_line(colour="#D0D0D0",size=.75),
axis.ticks=element_blank())
mapTheme <- theme(plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_line(colour = 'transparent'),
panel.grid.minor=element_blank(),
legend.direction = "vertical",
legend.position = "right",
plot.margin = margin(1, 1, 1, 1, 'cm'),
legend.key.height = unit(1, "cm"), legend.key.width = unit(0.2, "cm"))
palette2 <- c("#41b6c4","#253494")
palette4 <- c("#a1dab4","#41b6c4","#2c7fb8","#253494")
palette5 <- c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494")
palette10 <- c("#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4",
"#4eb3d3","#2b8cbe","#0868ac","#084081","#f7fcf0")
mv<- mapview
table(port_14_10_rc["lc"])
# Create a table of values for the reclassified raster image
table(port_14_10_rc["lc"])
library(tidyverse)
library(sf)
library(raster)
library(knitr)
library(kableExtra)
library(tidycensus)
library(tigris)
library(FNN)
#library(QuantPsyc) # JE Note: in R 4.1, QuantPsyc package not available.
library(caret)
library(yardstick)
library(pscl)
library(plotROC)
library(ggrepel)
library(pROC)
library(grid)
library(gridExtra)
library(viridis)
library(igraph)
library(exactextractr)
library(geojsonsf)
library(stars)
library(starsExtra)
library(mapview)
library(glue)
plotTheme <- theme(
plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size = 10),
# Set the entire chart region to blank
panel.background=element_blank(),
plot.background=element_blank(),
#panel.border=element_rect(colour="#F0F0F0"),
# Format the grid
panel.grid.major=element_line(colour="#D0D0D0",size=.75),
axis.ticks=element_blank())
mapTheme <- theme(plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_line(colour = 'transparent'),
panel.grid.minor=element_blank(),
legend.direction = "vertical",
legend.position = "right",
plot.margin = margin(1, 1, 1, 1, 'cm'),
legend.key.height = unit(1, "cm"), legend.key.width = unit(0.2, "cm"))
palette2 <- c("#41b6c4","#253494")
palette4 <- c("#a1dab4","#41b6c4","#2c7fb8","#253494")
palette5 <- c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494")
palette10 <- c("#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4",
"#4eb3d3","#2b8cbe","#0868ac","#084081","#f7fcf0")
mv<- mapview
port_14 <- read_stars("Data/lc/port_51740_lc_2014/port_51740_landcover_2014.tif")
port_18 <- read_stars("Data/lc/port_51740_lc_2018/port_51740_landcover_2018.tif")
james_14 <- read_stars("Data/lc/jame_51095_lc_2014/jame_51095_landcover_2014.tif")
james_18 <- read_stars("Data/lc/jame_51095_lc_2018/jame_51095_landcover_2018.tif")
port_area <- st_read("Data/boundary/portsmouth.shp")
james_area <- st_read("Data/boundary/James.shp")
# Transform the test area object to the same CRS as the raster image
port_area <- port_area %>%
st_transform(crs = st_crs(port_14))
# Resample the raster image to 10x10 cells
port_14_10 <- st_warp(port_14, cellsize = 10, crs = st_crs(port_14))
port_18_10 <- st_warp(port_18, cellsize = 10, crs = st_crs(port_18))
# Plot the resampled raster image
mv(port_14_10) + mv(port_area)
# Crop the resampled raster image to the test area
port_14_10_crop <- st_crop(port_14_10, port_area)
port_18_10_crop <- st_crop(port_18_10, port_area)
# Plot the cropped raster image
mv(port_area)+mv(port_14_10_crop)
# Reclassify the cropped raster image
port_14_10_rc <- port_14_10_crop %>%
mutate(lc = case_when(
port_51740_landcover_2014.tif < 6  ~ 0,
port_51740_landcover_2014.tif >= 6 ~ 1
))
port_18_10_rc <- port_18_10_crop %>%
mutate(lc = case_when(
port_51740_landcover_2018.tif < 6  ~ 0,
port_51740_landcover_2018.tif >= 6 ~ 1
))
# Plot the reclassified raster image
port_lc_14 <- port_14_10_rc["lc"]
mv(port_lc_14)
port_lc_18 <- port_18_10_rc["lc"]
mv(port_lc_18)
# Create a table of values for the reclassified raster image
table(port_14_10_rc["lc"])
# Calculate the mean value for a 3x3 cell neighborhood
port_14_pcnt_imperv = focal2(port_14_10_rc["lc"], matrix(1, 3, 3), "mean")
port_18_pcnt_imperv = focal2(port_18_10_rc["lc"], matrix(1, 3, 3), "mean")
# histogram of the percentage of 1 (impervious) per 30x30m cell
hist(port_14_pcnt_imperv$lc)
# Plot the result of the mean calculation
# Why do these two methods look different?
plot(port_14_pcnt_imperv)
plot(port_18_pcnt_imperv)
mv(port_14_pcnt_imperv)
mv(port_18_pcnt_imperv)
# Transform the test area object to the same CRS as the raster image
james_area <- james_area %>%
st_transform(crs = st_crs(james_14))
# Resample the raster image to 10x10 cells
james_14_10 <- st_warp(james_14, cellsize = 10, crs = st_crs(james_14))
port_18_pcnt_imperv-port_14_pcnt_imperv
port_51740_landcover_2018.tif-port_51740_landcover_2014.tif
port_18_10_rc["lc"]-port_14_10_rc["lc"]
table(port_18_10_rc["lc"]-port_14_10_rc["lc"])
port_change<-port_18_10_rc["lc"]-port_14_10_rc["lc"]
port_change_rc <- port_change %>%
mutate(perv_to_imperv = case_when(
lc < 0  ~ 0,
lc >= 0 ~ 1
))
port_change<-port_18_10_rc["lc"]-port_14_10_rc["lc"]
port_change_rc <- port_change %>%
mutate(perv_to_imperv = case_when(
lc <= 0  ~ 0,
lc > 0 ~ 1
))
mv(port_change_rc)
table(port_change_rc)
mv(port_change_rc["perv_to_imperv"])
port_lc_change<-port_change_rc["perv_to_imperv"]
mv(port_lc_change)
# Transform the test area object to the same CRS as the raster image
james_area <- james_area %>%
st_transform(crs = st_crs(james_14))
# Resample the raster image to 10x10 cells
james_14_10 <- st_warp(james_14, cellsize = 10, crs = st_crs(james_14))
james_18_10 <- st_warp(james_18, cellsize = 10, crs = st_crs(james_18))
# Plot the resampled raster image
mv(james_14_10) + mv(james_area)
# Crop the resampled raster image to the test area
james_14_10_crop <- st_crop(james_14_10, james_area)
james_18_10_crop <- st_crop(james_18_10, james_area)
# Plot the cropped raster image
mv(james_area)+mv(james_14_10_crop)
# Reclassify the cropped raster image
james_14_10_rc <- james_14_10_crop %>%
mutate(lc = case_when(
jame_51095_landcover_2014.tif < 6  ~ 0,
jame_51095_landcover_2014.tif >= 6 ~ 1
))
james_18_10_rc <- james_18_10_crop %>%
mutate(lc = case_when(
jame_51095_landcover_2018.tif < 6  ~ 0,
jame_51095_landcover_2018.tif >= 6 ~ 1
))
# Plot the reclassified raster image
james_lc_14 <- james_14_10_rc["lc"]
mv(james_lc_14)
james_lc_18 <- james_18_10_rc["lc"]
mv(james_lc_18)
# Create a table of values for the reclassified raster image
table(james_14_10_rc["lc"])
# Calculate the mean value for a 3x3 cell neighborhood
james_14_pcnt_imperv = focal2(james_14_10_rc["lc"], matrix(1, 3, 3), "mean")
james_18_pcnt_imperv = focal2(james_18_10_rc["lc"], matrix(1, 3, 3), "mean")
# histogram of the percentage of 1 (impervious) per 30x30m cell
hist(james_14_pcnt_imperv$lc)
# Plot the result of the mean calculation
# Why do these two methods look different?
plot(james_14_pcnt_imperv)
plot(james_18_pcnt_imperv)
mv(james_14_pcnt_imperv)
mv(james_18_pcnt_imperv)
james_change<-james_18_10_rc["lc"]-james_14_10_rc["lc"]
james_change_rc <- james_change %>%
mutate(perv_to_imperv = case_when(
lc <= 0  ~ 0,
lc > 0 ~ 1
))
james_lc_change<-james_change_rc["perv_to_imperv"]
mv(james_lc_change)
library(tidyverse)
library(sf)
library(raster)
library(knitr)
library(kableExtra)
library(tidycensus)
library(tigris)
library(FNN)
#library(QuantPsyc) # JE Note: in R 4.1, QuantPsyc package not available.
library(caret)
library(yardstick)
library(pscl)
library(plotROC)
library(ggrepel)
library(pROC)
library(grid)
library(gridExtra)
library(viridis)
library(igraph)
library(exactextractr)
library(geojsonsf)
library(stars)
library(starsExtra)
library(mapview)
library(glue)
plotTheme <- theme(
plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size = 10),
# Set the entire chart region to blank
panel.background=element_blank(),
plot.background=element_blank(),
#panel.border=element_rect(colour="#F0F0F0"),
# Format the grid
panel.grid.major=element_line(colour="#D0D0D0",size=.75),
axis.ticks=element_blank())
mapTheme <- theme(plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_line(colour = 'transparent'),
panel.grid.minor=element_blank(),
legend.direction = "vertical",
legend.position = "right",
plot.margin = margin(1, 1, 1, 1, 'cm'),
legend.key.height = unit(1, "cm"), legend.key.width = unit(0.2, "cm"))
palette2 <- c("#41b6c4","#253494")
palette4 <- c("#a1dab4","#41b6c4","#2c7fb8","#253494")
palette5 <- c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494")
palette10 <- c("#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4",
"#4eb3d3","#2b8cbe","#0868ac","#084081","#f7fcf0")
mv<- mapview
mv(james_lc_18)
mv(james_14_pcnt_imperv)
mv(james_18_pcnt_imperv)
mv(james_lc_change)
memory.limit()
memory.size
isle_14_10 <- read_stars("Data/lc/islelc_14.tif")
isle_14_10 <- read_stars("Data/lc/islelc_14/islelc_14.tif")
isle_14_10 <- read_stars("Data/lc/islelc_14/islelc_14.tif")
# Reclassify the cropped raster image
isle_14_10_rc <- isle_14_10_crop %>%
mutate(lc = case_when(
islelc_14 < 6  ~ 0,
islelc_14 >= 6 ~ 1
))
# Transform the test area object to the same CRS as the raster image
isle_area <- isle_area %>%
st_transform(crs = st_crs(isle_14_10))
isle_14_10 <- read_stars("Data/lc/islelc_14")
isle_18_10 <- read_stars("Data/lc/islelc_18")
port_area <- st_read("Data/boundary/portsmouth.shp")
james_area <- st_read("Data/boundary/James.shp")
isle_area <- st_read("Data/boundary/Isle_of_Wight.shp")
# Transform the test area object to the same CRS as the raster image
isle_area <- isle_area %>%
st_transform(crs = st_crs(isle_14_10))
# Resample the raster image to 10x10 cells
#isle_14 <- st_warp(isle_14, cellsize = 10, crs = st_crs(isle_14))
# Plot the resampled raster image
mv(isle_14_10) + mv(isle_area)
# Crop the resampled raster image to the test area
isle_14_10_crop <- st_crop(isle_14_10, isle_area)
isle_14_10 <- read_stars("Data/lc/islelc_14_10x10.tif")
isle_18_10 <- read_stars("Data/lc/islelc_18_10x10.tif")
# Transform the test area object to the same CRS as the raster image
isle_area <- isle_area %>%
st_transform(crs = st_crs(isle_14_10))
# Resample the raster image to 10x10 cells
#isle_14 <- st_warp(isle_14, cellsize = 10, crs = st_crs(isle_14))
# Plot the resampled raster image
mv(isle_14_10) + mv(isle_area)
# Crop the resampled raster image to the test area
isle_14_10_crop <- st_crop(isle_14_10, isle_area)
isle_18_10_crop <- st_crop(isle_18_10, isle_area)
# Plot the cropped raster image
plot(isle_14_10_crop)
plot(isle_18_10_crop)
# Reclassify the cropped raster image
isle_14_10_rc <- isle_14_10_crop %>%
mutate(lc = case_when(
islelc_14_10x10.tif < 6  ~ 0,
islelc_14_10x10.tif >= 6 ~ 1
))
isle_18_10_rc <- james_18_10_crop %>%
mutate(lc = case_when(
islelc_18_10x10.tif < 6  ~ 0,
islelc_18_10x10.tif >= 6 ~ 1
))
isle_18_10 <- read_stars("Data/lc/islelc_18_10x10.tif")
isle_18_10_rc <- james_18_10_crop %>%
mutate(lc = case_when(
islelc_18_10x10.tif < 6  ~ 0,
islelc_18_10x10.tif >= 6 ~ 1
))
isle_lc_14 <- isle_14_10_rc["lc"]
plot(james_lc_14)
isle_lc_18 <- isle_18_10_rc["lc"]
isle_18_10_rc <- isle_18_10_crop %>%
mutate(lc = case_when(
islelc_18_10x10.tif < 6  ~ 0,
islelc_18_10x10.tif >= 6 ~ 1
))
isle_lc_18 <- isle_18_10_rc["lc"]
plot(james_lc_18)
isle_lc_14 <- isle_14_10_rc["lc"]
plot(james_lc_14)
isle_lc_18 <- isle_18_10_rc["lc"]
plot(james_lc_18)
isle_change<-isle_18_10_rc["lc"]-isle_14_10_rc["lc"]
isle_change_rc <- isle_change %>%
mutate(perv_to_imperv = case_when(
lc <= 0  ~ 0,
lc > 0 ~ 1
))
isle_lc_change<-isle_change_rc["perv_to_imperv"]
plot(isle_lc_change)
