quintileBreaks <- function(df,variable) {
as.character(quantile(df[[variable]],
c(.01,.2,.4,.6,.8),na.rm=T))
}
#This function can be used to convert a polygon sf to centroids xy coords.
xyC <- function(aPolygonSF) {
as.data.frame(
cbind(x=st_coordinates(st_centroid(aPolygonSF))[,1],
y=st_coordinates(st_centroid(aPolygonSF))[,2]))
}
#this function convert a raster to a data frame so it can be plotted in ggplot
rast <- function(inRaster) {
data.frame(
xyFromCell(inRaster, 1:ncell(inRaster)),
value = getValues(inRaster)) }
islelc_14 = raster("~/Github/Practicum/Data/lc/isle_51093_lc_2014/isle_51093_landcover_2014.tif")
islelc_14 = raster("/Data/lc/isle_51093_lc_2014/isle_51093_landcover_2014.tif")
islelc_14 = raster("Data/lc/isle_51093_lc_2014/isle_51093_landcover_2014.tif")
islelc_18 = raster("~/Github/Practicum/Data/lc/isle_51093_lc_2018/isle_51093_landcover_2018.tif")
islelc_14 = raster("Data/lc/isle_51093_lc_2014/isle_51093_landcover_2014.tif")
islelc_18 = raster("Data/lc/isle_51093_lc_2018/isle_51093_landcover_2018.tif")
islelc_change = raster("Data/lc/isle_51093_lc_change_2014_2018/isle_51093_landcoverchange_20142018.tif")
jamelc_14 = raster("Data/lc/jame_51095_lc_2014/jame_51095_landcover_2014.tif")
jamelc_18 = raster("Data/lc/jame_51095_lc_2018/jame_51095_landcover_2018.tif")
jamelc_change = raster("Data/lc/jame_51095_lc_change_2014_2018/jame_51095_landcoverchange_20142018.tif")
portlc_14 = raster("Data/lc/port_51740_lc_2014/port_51740_landcover_2014.tif")
portlc_18 = raster("Data/lc/port_51740_lc_2018/port_51740_landcover_2018.tif")
portlc_change = raster("Data/lc/port_51740_lc_change_2014_2018/port_51740_landcoverchange_20142018.tif")
ggplot() +
geom_sf(data=houstonMSA) +
geom_raster(data=rast(lc_change) %>% na.omit %>% filter(value > 0),
aes(x,y,fill=as.factor(value))) +
scale_fill_viridis(direction = -1, discrete=TRUE, name ="Land Cover\nChange") +
labs(title = "Land Cover Change, 2000-2010") +
mapTheme +
theme(legend.direction="horizontal")
isboundary <- st_read("Data/isle/town_boundaries/Soils.shp")
isboundary <- st_read("Data/isle/town_boundaries/Soils.shp")
crs(isboundary)
isboundary <- st_read("Data/isle/town_boundaries/Soils.shp")
crs(isboundary)
crs(islelc_14)
ggplot() +
geom_raster(data=rast(islelc_14) %>% na.omit %>% filter(value > 0),
aes(x,y,fill=as.factor(value))) +
scale_fill_viridis(direction = -1, discrete=TRUE, name ="Land Cover\nChange") +
labs(title = "Land Cover Change, 2000-2010") +
mapTheme +
theme(legend.direction="horizontal")
ggplot() +
geom_raster(data=rast(islelc_14) %>% na.omit %>% filter(value > 0),
aes(x,y,fill=as.factor(value))) +
scale_fill_viridis(discrete=TRUE, name ="") +
labs(title = "Land Cover, 2014") +
mapTheme +
theme(legend.direction="horizontal")
isboundary <- st_read("Data/isle/town_boundaries/Soils.shp")
crs(isboundary)
isboundary <- st_read("Data/isle/MagisterialDistricts/MagisterialDistricts.shp")
crs(isboundary)
isDistricts <- st_read("Data/isle/MagisterialDistricts/MagisterialDistricts.shp")
crs(isDistricts)
isDistricts <- st_read("Data/isle/MagisterialDistricts/MagisterialDistricts.shp")%>%
st_transform('EPSG:4269')
ggplot() +
geom_sf(data=isDistricts) +
geom_raster(data=rast(islelc_14) %>% na.omit %>% filter(value > 0),
aes(x,y,fill=as.factor(value))) +
scale_fill_viridis(discrete=TRUE, name ="") +
labs(title = "Land Cover, 2001") +
mapTheme +
theme(legend.direction="horizontal")
ggplot() +
geom_sf(data=isDistricts) +
geom_raster(data=rast(islelc_change) %>% na.omit %>% filter(value > 0),
aes(x,y,fill=as.factor(value))) +
scale_fill_viridis(discrete=TRUE, name ="") +
labs(title = "Land Cover, 2001") +
mapTheme +
theme(legend.direction="horizontal")
library(tidyverse)
library(sf)
library(raster)
library(knitr)
library(kableExtra)
library(tidycensus)
library(tigris)
library(FNN)
#library(QuantPsyc) # JE Note: in R 4.1, QuantPsyc package not available.
library(caret)
library(yardstick)
library(pscl)
library(plotROC)
library(ggrepel)
library(pROC)
library(grid)
library(gridExtra)
library(viridis)
library(igraph)
library(exactextractr)
plotTheme <- theme(
plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size = 10),
# Set the entire chart region to blank
panel.background=element_blank(),
plot.background=element_blank(),
#panel.border=element_rect(colour="#F0F0F0"),
# Format the grid
panel.grid.major=element_line(colour="#D0D0D0",size=.75),
axis.ticks=element_blank())
mapTheme <- theme(plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_line(colour = 'transparent'),
panel.grid.minor=element_blank(),
legend.direction = "vertical",
legend.position = "right",
plot.margin = margin(1, 1, 1, 1, 'cm'),
legend.key.height = unit(1, "cm"), legend.key.width = unit(0.2, "cm"))
palette2 <- c("#41b6c4","#253494")
palette4 <- c("#a1dab4","#41b6c4","#2c7fb8","#253494")
palette5 <- c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494")
palette10 <- c("#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4",
"#4eb3d3","#2b8cbe","#0868ac","#084081","#f7fcf0")
#this function converts a column in to quintiles. It is used for mapping.
quintileBreaks <- function(df,variable) {
as.character(quantile(df[[variable]],
c(.01,.2,.4,.6,.8),na.rm=T))
}
#This function can be used to convert a polygon sf to centroids xy coords.
xyC <- function(aPolygonSF) {
as.data.frame(
cbind(x=st_coordinates(st_centroid(aPolygonSF))[,1],
y=st_coordinates(st_centroid(aPolygonSF))[,2]))
}
#this function convert a raster to a data frame so it can be plotted in ggplot
rast <- function(inRaster) {
data.frame(
xyFromCell(inRaster, 1:ncell(inRaster)),
value = getValues(inRaster)) }
isle_bound<- st_read("D:/0MUSA/MUSA801/Precision-Forecasts-of-Land-Cover-Change/Data/isle/Precincts2022")%>%
st_transform('ESRI:102741')
isle_bound<- st_read("/Data/isle/Precincts2022")%>%
st_transform('ESRI:102741')
isle_bound<- st_read("Data/isle/Precincts2022")%>%
st_transform('ESRI:102741')
isle_bound<- st_read("Data/isle/Precincts2022")%>%
st_transform('ESRI:102741')
isle_2014 <- raster("D:/0MUSA/MUSA801/Precision-Forecasts-of-Land-Cover-Change/Data/lc/cell_size_changed/isle_2014")%>%
crop(y = isle_bound %>% st_transform(crs(isle_2014)))
isle_2014 <- raster("Data/lc/cell_size_changed/isle_2014")%>%
crop(y = isle_bound %>% st_transform(crs(isle_2014)))
isle_2014 <- raster("Data/lc/cell_size_changed/isle_2014")%>%
# crop(y = isle_bound %>% st_transform(crs(isle_2014)))
isle_2018 <- raster("Data/lc/cell_size_changed/isle_2018")
isle_bound<- st_read("Data/isle/Precincts2022")%>%
st_transform('ESRI:102741')
isle_2014 <- raster("Data/lc/cell_size_changed/isle_2014")%>%
crop(y = isle_bound %>% st_transform(crs(isle_2014)))
isle_2014 <- raster("Data/lc/cell_size_changed/isle_2014")
isle_2014 <- raster("Data/lc/cell_size_changed/isle_2014")
#%>%
# crop(y = isle_bound %>% st_transform(crs(isle_2014)))
isle_2018 <- raster("Data/lc/cell_size_changed/isle_2018")
port_2014 <- raster("Data/lc/cell_size_changed/port_2014")
port_2018 <- raster("Data/lc/cell_size_changed/port_2018")
james_2014 <- raster("Data/lc/cell_size_changed/james_2014")
james_2018 <- raster("Data/lc/cell_size_changed/james_2018")
isle_fishnet <-
st_make_grid(isle_bound,
cellsize = 1000,
square = FALSE) %>%
.[isle_bound] %>%            # <- MDH Added
st_sf() %>%
mutate(uniqueID = rownames(.))
isle_fishnet$cellsize <- as.numeric(st_area(isle_fishnet$geometry))
netBorder <- st_union(isle_fishnet) %>% st_as_sf()
ggplot() +
geom_sf(data = isle_fishnet, fill = "black", color = "white", stroke = 0.1) +
labs(title = "Fishnet, xx sq.mi. area per cell",
subtitle = "Isle of Wight County, Virginia South") +
mapTheme
#join the landcover data
isle_net <- cbind(isle_fishnet, exact_extract(isle_2014,
isle_fishnet %>% st_transform(crs(isle_2014)),'mode'))%>%
rename(landcover=exact_extract.isle_2014..isle_fishnet.....st_transform.crs.isle_2014....)
isle_net <- isle_net %>%
mutate(landcovername = case_when(landcover == "1" ~ "Water",
landcover == "2" ~ "Emergent Wetlands",
landcover == "3" ~ "Tree Canopy",
landcover== "4" ~ "Scrub/Shrub",
landcover == "5" ~ "Herbaceous",
landcover == "6" ~ "Barren",
landcover == "7" ~ "Structures",
landcover == "8" ~ "Other Impervious",
landcover == "9" ~ "Roads",
landcover == "10" ~ "Tree Canopy over Structures",
landcover == "11" ~ "Tree Canopy over Other Impervious",
landcover == "12" ~ "Tree Canopy over Roads")) %>%
mutate(landcover = make.names(landcover)) %>%
mutate(landcover = as.factor(landcover))
ggplot() +
geom_sf(data = isle_net, aes(fill = landcovername), colour = NA) +
scale_fill_manual(values = c("Water" = "#00b4d8",
"Roads" = "#ffffff",
"Other Impervious" = "#e8d1d1",
"Structures" = "#b50000",
"Barren" = "#d2cdc0",
"Tree Canopy" = "#85c77e",
"Scrub/Shrub" = "#dcca8f",
"Herbaceous" = "#fde9aa",
"Tree Canopy over Roads" = "#fbf65d",
"Tree Canopy over Other Impervious" = "#ca9146",
"Tree Canopy over Structures" = "#c8e6f8",
"Emergent Wetlands" = "#64b3d5")) +
labs(title = "Land Cover in Isle County") +
mapTheme
DEM1 <- raster("Data/DEM/USGS_1_n38w077_20170509")
DEM2 <- raster("Data/DEM/USGS_1_n37w077_20160315")
DEM1 <- raster("Data/DEM/USGS_1_n38w077_20170509.tiff")
DEM1 <- raster("Data/DEM/USGS_1_n38w077_20170509.tif")
DEM2 <- raster("Data/DEM/USGS_1_n37w077_20160315.tif")
DEM1 <- raster("Data/DEM/USGS_1_n38w077_20170509.tif")%>%
st_transform('ESRI:102741')
DEM <- raster::merge(DEM1, DEM2)
DEM <- raster::merge(DEM1, DEM2)
View(DEM)
DEM1 <- raster("Data/DEM/USGS_1_n38w077_20170509.tif")
DEM2 <- raster("Data/DEM/USGS_1_n37w077_20160315.tif")
DEM <- raster::merge(DEM1, DEM2)
isle_bound<- st_read("Data/isle/Precincts2022")%>%
st_transform('ESRI:103560')
crs(isle_bound)
isle_bound<- st_read("Data/isle/Precincts2022")%>%
st_transform('ESRI:102747')
DEM_crop <- crop(DEM, isle_bound)
DEM_crop <- crop(DEM, isle_bound%>% st_transform(crs(DEM))
DEM_crop <- crop(DEM, isle_bound%>% st_transform(crs(DEM)))
View(isle_net)
View(isle_fishnet)
View(isle_net)
#join the elevation data
isle_net <- cbind(isle_fishnet, exact_extract(DEM_crop,
isle_fishnet %>% st_transform(crs(DEM_crop)),'mode'))%>%
rename(elevation=exact_extract.DEM_crop..isle_fishnet.....st_transform.crs.DEM_crop....)
ggplot() +
geom_sf(data = isle_net, aes(fill = elevation), colour = NA) +
scale_fill_manual() +
labs(title = "Land Cover in Isle County") +
mapTheme
ggplot() +
geom_sf(data = isle_net, aes(fill = elevation), colour = NA) +
scale_fill_manual(discrete=TRUE, name ="") +
labs(title = "Land Cover in Isle County") +
mapTheme
ggplot() +
geom_sf(data = isle_net, aes(fill = elevation), colour = NA) +
scale_fill_manual(option = "B") +
labs(title = "Land Cover in Isle County") +
mapTheme
ggplot() +
geom_sf(data = isle_net, aes(fill = elevation), colour = NA)
labs(title = "Land Cover in Isle County") +
mapTheme
DEM_isle <- crop(DEM, isle_bound%>% st_transform(crs(DEM)))
isle_slope <- slope (DEM_isle)
install (starsExtra)
library(starsExtra)
library(tidyverse)
library(sf)
library(raster)
library(knitr)
library(kableExtra)
library(tidycensus)
library(tigris)
library(FNN)
#library(QuantPsyc) # JE Note: in R 4.1, QuantPsyc package not available.
library(caret)
library(yardstick)
library(pscl)
library(plotROC)
library(ggrepel)
library(pROC)
library(grid)
library(gridExtra)
library(viridis)
library(igraph)
library(exactextractr)
library(starsExtra)
plotTheme <- theme(
plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size = 10),
# Set the entire chart region to blank
panel.background=element_blank(),
plot.background=element_blank(),
#panel.border=element_rect(colour="#F0F0F0"),
# Format the grid
panel.grid.major=element_line(colour="#D0D0D0",size=.75),
axis.ticks=element_blank())
mapTheme <- theme(plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_line(colour = 'transparent'),
panel.grid.minor=element_blank(),
legend.direction = "vertical",
legend.position = "right",
plot.margin = margin(1, 1, 1, 1, 'cm'),
legend.key.height = unit(1, "cm"), legend.key.width = unit(0.2, "cm"))
palette2 <- c("#41b6c4","#253494")
palette4 <- c("#a1dab4","#41b6c4","#2c7fb8","#253494")
palette5 <- c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494")
palette10 <- c("#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4",
"#4eb3d3","#2b8cbe","#0868ac","#084081","#f7fcf0")
#this function converts a column in to quintiles. It is used for mapping.
quintileBreaks <- function(df,variable) {
as.character(quantile(df[[variable]],
c(.01,.2,.4,.6,.8),na.rm=T))
}
#This function can be used to convert a polygon sf to centroids xy coords.
xyC <- function(aPolygonSF) {
as.data.frame(
cbind(x=st_coordinates(st_centroid(aPolygonSF))[,1],
y=st_coordinates(st_centroid(aPolygonSF))[,2]))
}
#this function convert a raster to a data frame so it can be plotted in ggplot
rast <- function(inRaster) {
data.frame(
xyFromCell(inRaster, 1:ncell(inRaster)),
value = getValues(inRaster)) }
isle_bound<- st_read("Data/isle/Precincts2022")%>%
st_transform('ESRI:102747')
isle_2014 <- raster("Data/lc/cell_size_changed/isle_2014")
#%>%
# crop(y = isle_bound %>% st_transform(crs(isle_2014)))
isle_2018 <- raster("Data/lc/cell_size_changed/isle_2018")
port_2014 <- raster("Data/lc/cell_size_changed/port_2014")
port_2018 <- raster("Data/lc/cell_size_changed/port_2018")
james_2014 <- raster("Data/lc/cell_size_changed/james_2014")
james_2018 <- raster("Data/lc/cell_size_changed/james_2018")
isle_fishnet <-
st_make_grid(isle_bound,
cellsize = 1000,
square = FALSE) %>%
.[isle_bound] %>%            # <- MDH Added
st_sf() %>%
mutate(uniqueID = rownames(.))
isle_fishnet$cellsize <- as.numeric(st_area(isle_fishnet$geometry))
netBorder <- st_union(isle_fishnet) %>% st_as_sf()
ggplot() +
geom_sf(data = isle_fishnet, fill = "black", color = "white", stroke = 0.1) +
labs(title = "Fishnet, xx sq.mi. area per cell",
subtitle = "Isle of Wight County, Virginia South") +
mapTheme
#join the landcover data
isle_net <- cbind(isle_fishnet, exact_extract(isle_2014,
isle_fishnet %>% st_transform(crs(isle_2014)),'mode'))%>%
rename(landcover=exact_extract.isle_2014..isle_fishnet.....st_transform.crs.isle_2014....)
isle_net <- isle_net %>%
mutate(landcovername = case_when(landcover == "1" ~ "Water",
landcover == "2" ~ "Emergent Wetlands",
landcover == "3" ~ "Tree Canopy",
landcover== "4" ~ "Scrub/Shrub",
landcover == "5" ~ "Herbaceous",
landcover == "6" ~ "Barren",
landcover == "7" ~ "Structures",
landcover == "8" ~ "Other Impervious",
landcover == "9" ~ "Roads",
landcover == "10" ~ "Tree Canopy over Structures",
landcover == "11" ~ "Tree Canopy over Other Impervious",
landcover == "12" ~ "Tree Canopy over Roads")) %>%
mutate(landcover = make.names(landcover)) %>%
mutate(landcover = as.factor(landcover))
ggplot() +
geom_sf(data = isle_net, aes(fill = landcovername), colour = NA) +
scale_fill_manual(values = c("Water" = "#00b4d8",
"Roads" = "#ffffff",
"Other Impervious" = "#e8d1d1",
"Structures" = "#b50000",
"Barren" = "#d2cdc0",
"Tree Canopy" = "#85c77e",
"Scrub/Shrub" = "#dcca8f",
"Herbaceous" = "#fde9aa",
"Tree Canopy over Roads" = "#fbf65d",
"Tree Canopy over Other Impervious" = "#ca9146",
"Tree Canopy over Structures" = "#c8e6f8",
"Emergent Wetlands" = "#64b3d5")) +
labs(title = "Land Cover in Isle County") +
mapTheme
DEM1 <- raster("Data/DEM/USGS_1_n38w077_20170509.tif")
DEM2 <- raster("Data/DEM/USGS_1_n37w077_20160315.tif")
DEM <- raster::merge(DEM1, DEM2)
DEM1 <- raster("Data/DEM/USGS_1_n38w077_20170509.tif")
DEM2 <- raster("Data/DEM/USGS_1_n37w077_20160315.tif")
DEM <- raster::merge(DEM1, DEM2)
DEM_isle <- crop(DEM, isle_bound%>% st_transform(crs(DEM)))
isle_slope <- slope (DEM_isle)
crs(DEM)
## Define the Proj.4 spatial reference
#https://spatialreference.org/ref/epsg/2284/proj4/
newproj <- "+proj=lcc +lat_1=37.96666666666667 +lat_2=36.76666666666667 +lat_0=36.33333333333334 +lon_0=-78.5 +x_0=3500000.0001016 +y_0=999999.9998983998 +ellps=GRS80 +datum=NAD83 +to_meter=0.3048006096012192 +no_defs "
DEM <- projectRaster(DEM, crs=newproj)
DEM_isle <- crop(DEM, isle_bound%>% st_transform(crs(DEM)))
isle_slope <- slope (DEM_isle)
DEM_isle <- crop(DEM, isle_bound%>% st_transform(crs(DEM)))
isle_slope <- terrain (DEM_isle, opt='slope')
library(tidyverse)
library(sf)
library(raster)
library(knitr)
library(kableExtra)
library(tidycensus)
library(tigris)
library(FNN)
#library(QuantPsyc) # JE Note: in R 4.1, QuantPsyc package not available.
library(caret)
library(yardstick)
library(pscl)
library(plotROC)
library(ggrepel)
library(pROC)
library(grid)
library(gridExtra)
library(viridis)
library(igraph)
library(exactextractr)
#library(starsExtra)
plotTheme <- theme(
plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size = 10),
# Set the entire chart region to blank
panel.background=element_blank(),
plot.background=element_blank(),
#panel.border=element_rect(colour="#F0F0F0"),
# Format the grid
panel.grid.major=element_line(colour="#D0D0D0",size=.75),
axis.ticks=element_blank())
mapTheme <- theme(plot.title =element_text(size=12),
plot.subtitle = element_text(size=8),
plot.caption = element_text(size = 6),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_line(colour = 'transparent'),
panel.grid.minor=element_blank(),
legend.direction = "vertical",
legend.position = "right",
plot.margin = margin(1, 1, 1, 1, 'cm'),
legend.key.height = unit(1, "cm"), legend.key.width = unit(0.2, "cm"))
palette2 <- c("#41b6c4","#253494")
palette4 <- c("#a1dab4","#41b6c4","#2c7fb8","#253494")
palette5 <- c("#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494")
palette10 <- c("#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4",
"#4eb3d3","#2b8cbe","#0868ac","#084081","#f7fcf0")
#join the slope data
isle_net <- cbind(isle_fishnet, exact_extract(isle_slope,
isle_fishnet %>% st_transform(crs(isle_slope)),'mode'))%>%
rename(slope=exact_extract.isle_slope..isle_fishnet.....st_transform.crs.isle_slope....)
ggplot() +
geom_sf(data = isle_net, aes(fill = elevation), colour = NA)
#join the elevation data
isle_net <- cbind(isle_fishnet, exact_extract(DEM_isle,
isle_fishnet %>% st_transform(crs(DEM_isle)),'mode'))%>%
rename(elevation=exact_extract.DEM_isle..isle_fishnet.....st_transform.crs.DEM_isle....)
ggplot() +
geom_sf(data = isle_net, aes(fill = elevation), colour = NA)
labs(title = "Land Cover in Isle County") +
mapTheme
ggplot() +
geom_sf(data = isle_net, aes(fill = slope), colour = NA)
View(isle_slope)
View(isle_net)
#join the slope data
isle_net <- cbind(isle_fishnet, exact_extract(isle_slope,
isle_fishnet %>% st_transform(crs(isle_slope)),'mode'))%>%
rename(slope=exact_extract.isle_slope..isle_fishnet.....st_transform.crs.isle_slope....)
ggplot() +
geom_sf(data = isle_net, aes(fill = slope), colour = NA)
labs(title = "Slope in Isle County") +
mapTheme
